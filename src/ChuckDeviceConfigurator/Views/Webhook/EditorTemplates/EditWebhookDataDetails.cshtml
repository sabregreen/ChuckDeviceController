@using POGOProtos.Rpc
@using static POGOProtos.Rpc.EnumWrapper.Types
@using static POGOProtos.Rpc.GameplayWeatherProto.Types
@model Webhook

<div class="card">
    <div class="card-header">@localizer["Blacklisted Data"]</div>
    <div class="card-body">
        <div class="form-floating mb-3 Pokemon">
            <textarea id="Data.PokemonIds" name="Data.PokemonIds" class="form-control" placeholder="i.e. 1_f123_c11_g1">@(string.Join("\n", Model?.Data?.PokemonIds ?? new()))</textarea>
            <label asp-for="Data!.PokemonIds"></label> <small class="text-muted"><i>@localizer["Each entry should be on a newline"]</i></small>
            <span asp-validation-for="Data!.PokemonIds" class="text-danger"></span>
        </div>
        <div class="form-floating mb-3 Pokestops">
            <textarea id="Data.PokestopIds" name="Data.PokestopIds" class="form-control" placeholder="i.e. 000350f25244314e8b1bec531c7aa7a0.16">@(string.Join("\n", Model?.Data?.PokestopIds ?? new()))</textarea>
            <label asp-for="Data!.PokestopIds"></label> <small class="text-muted"><i>@localizer["Each entry should be on a newline"]</i></small>
            <span asp-validation-for="Data!.PokestopIds" class="text-danger"></span>
        </div>
        <div class="form-floating mb-3 Raids">
            <textarea id="Data.RaidPokemonIds" name="Data.RaidPokemonIds" class="form-control" placeholder="i.e. 150_f123_c11_g1">@(string.Join("\n", Model?.Data?.RaidPokemonIds ?? new()))</textarea>
            <label asp-for="Data!.RaidPokemonIds"></label> <small class="text-muted"><i>@localizer["Each entry should be on a newline"]</i></small>
            <span asp-validation-for="Data!.RaidPokemonIds" class="text-danger"></span>
        </div>
        <div class="form-group mb-3 Eggs">
            <label asp-for="Data!.EggLevels"></label>
            <select asp-for="Data!.EggLevels" class="form-control" multiple>
                <option value="">@localizer["Please select one or more"]</option>
                @for (var i = 1; i < 9; i++)
                {
                    <option value="@i">@localizer[$"raid_{i}"]</option>
                }
            </select>
            <span asp-validation-for="Data!.EggLevels" class="text-danger"></span>
        </div>
        <div class="form-group mb-3 Lures">
            <label asp-for="Data!.LureIds"></label>
            <select asp-for="Data!.LureIds" class="form-control" multiple>
                <option value="">@localizer["Please select one or more"]</option>
                <option value="501">@localizer["lure_501"]</option>
                <option value="502">@localizer["lure_502"]</option>
                <option value="503">@localizer["lure_503"]</option>
                <option value="504">@localizer["lure_504"]</option>
                <option value="505">@localizer["lure_505"]</option>
            </select>
            <span asp-validation-for="Data!.LureIds" class="text-danger"></span>
        </div>
        <div class="form-group mb-3 Invasions">
            <label asp-for="Data!.InvasionIds"></label>
            <select asp-for="Data!.InvasionIds" class="form-control" asp-items="Html.GetEnumSelectList<InvasionCharacter>()" multiple>
                <option value="">@localizer["Please select one or more"]</option>
            </select>
            <span asp-validation-for="Data!.InvasionIds" class="text-danger"></span>
        </div>
        <div class="form-group mb-3 Gyms">
            <label asp-for="Data!.GymTeamIds"></label>
            <select asp-for="Data!.GymTeamIds" class="form-control" asp-items="Html.GetEnumSelectList<Team>()" multiple>
                <option value="">@localizer["Please select one or more"]</option>
            </select>
            <span asp-validation-for="Data!.GymTeamIds" class="text-danger"></span>
        </div>
        <div class="form-floating mb-3 GymInfo">
            <textarea id="Data.GymIds" name="Data.GymIds" class="form-control" placeholder="i.e. 0002a1b5721140cc847c20b59030727a.16">@(string.Join("\n", Model?.Data?.GymIds ?? new()))</textarea>
            <label asp-for="Data!.GymIds"></label> <small class="text-muted"><i>@localizer["Each entry should be on a newline"]</i></small>
            <span asp-validation-for="Data!.GymIds" class="text-danger"></span>
        </div>
        <div class="form-group mb-3 Weather">
            <label asp-for="Data!.WeatherConditionIds"></label>
            <select asp-for="Data!.WeatherConditionIds" class="form-control" asp-items="Html.GetEnumSelectList<WeatherCondition>()" multiple>
                <option value="">@localizer["Please select one or more"]</option>
            </select>
            <span asp-validation-for="Data!.WeatherConditionIds" class="text-danger"></span>
        </div>
    </div>
</div>

<script>
    const types = [
        'Pokemon',
        'Pokestops',
        'Lures',
        'Invasions',
        'Quests',
        'AlternativeQuests',
        'Gyms',
        'GymInfo',
        'GymDefenders',
        'GymTrainers',
        'Eggs',
        'Raids',
        'Weather',
        'Accounts',
    ];

    const typesEl = document.getElementById('Types');
    typesEl.addEventListener('change', toggleElements);

    const typesSelected = '@Model?.Types.ToString()'.split(', ');
    for (let i = 0; i < typesEl.options.length; i++) {
        const selectedValue = typesSelected.indexOf(typesEl.options[i].text);
        const isSelected = selectedValue >= 0;
        typesEl.options[i].selected = isSelected;
    }

    toggleElements();

    function toggleElements() {
        const selected = Object.values(typesEl.selectedOptions).map(x => x.text);
        for (const type of types) {
            const show = selected.length > 0 && selected.includes(type);
            hideElements(type, show);
        }
    }

    function hideElements(className, show) {
        const elements = document.getElementsByClassName(className);
        for (const element of elements) {
            element.style.display = show ? 'block' : 'none';
        }
    }
</script>