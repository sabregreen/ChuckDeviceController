@using ChuckDeviceController.Data.Entities
@using ChuckDeviceConfigurator.ViewModels;
@model ViewModelsModel<Account>
@{
    ViewData["Title"] = "Accounts";
    var pageSize = Context.Request.Query.ContainsKey("pageSize")
        ? Convert.ToInt32(Context.Request.Query["pageSize"])
        : 100;
    // TODO: Add account statistics, add tabs: one for account stats another for accounts list
}

<h1>Accounts</h1>

<p>
    <a class="btn btn-success btn-sm" asp-action="Add">Import Accounts</a>
</p>

<table class="table table-striped">
    <thead class="table-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Items[0].Username)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items[0].Level)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items[0].Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items[0].LastEncounter)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items[0].Spins)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items[0].GroupName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items[0].IsInUse)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>
                <th scope="row">
                    @Html.DisplayFor(modelItem => item.Username)
                </th>
                <td>
                    @Html.DisplayFor(modelItem => item.Level)
                </td>
                <td>
                    @Html.Raw(GetAccountStatusColor(item.Status))
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastEncounter)
                </td>
                <td>
                    @item.Spins.ToString("N0")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GroupName)
                </td>
                <td>
                    @(item.IsInUse ? "Yes" : "No")
                </td>
                <td>
                    <div class="dropdown">
                        <button class="btn btn-primary btn-sm dropdown-toggle" type="button" id="dropdownGroup" data-bs-toggle="dropdown" aria-expanded="false">
                            Action
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownGroup">
                            <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@item.Username">Edit</a></li>
                            <li><a class="dropdown-item" asp-action="Details" asp-route-id="@item.Username">Details</a></li>
                            <li><a class="dropdown-item" asp-action="Delete" asp-route-id="@item.Username">Delete</a></li>
                        </ul>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<label>
    Page: @ViewBag.Page / @ViewBag.MaxPage
</label>

@if (ViewBag.Page > 1)
{
    <a href="@Url.Action("Index", new { page = ViewBag.Page - 1, pageSize = pageSize })" 
       class="btn btn-default">
        &laquo; Prev
    </a>
}
@if (ViewBag.Page - 1 < ViewBag.MaxPage - 1)
{
    <a href="@Url.Action("Index", new { page = ViewBag.Page + 1, pageSize = pageSize })" 
       class="btn btn-default">
        Next &raquo;
    </a>
}
<br />

@{
    string GetAccountStatusColor(string status)
    {
        var color = "black";
        switch (status)
        {
            case "Good":
                color = "green";
                break;
            case "Banned":
                color = "red";
                break;
            case "Warning":
            case "Invalid":
            case "Suspended":
                color = "orange";
                break;
        }
        var html = "<span style='color: {0};'>{1}</span>";
        return string.Format(html, color, status);
    }
}