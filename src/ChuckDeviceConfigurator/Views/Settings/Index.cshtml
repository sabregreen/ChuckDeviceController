@using System.Text.Json
@using ChuckDeviceConfigurator.Controllers
@using ChuckDeviceConfigurator.Extensions
@using ChuckDeviceController.Extensions.Json
@using ChuckDeviceController.Plugin

@* TODO: Create ViewComponents for HTML elements *@

@model SettingsManager
@{
    ViewData["Title"] = localizer["Settings"];

    var tabs = (List<ISettingsTab>)ViewBag.SettingsTabs;
    var properties = (Dictionary<string, List<ISettingsProperty>>)ViewBag.SettingsProperties;

    async Task AddProperty(ISettingsProperty property)
    {
        switch (property.Type)
        {
            case SettingsPropertyType.Text:
                <div class="form-group mb-3">
                    <label class="control-label">@property.Text</label>
                    <input type="text" id="@property.Name" name="@property.Name" value="@(Model.Get<string>(property.Name, property.DefaultValue))" class="@property.Class" style="@property.Style" />
                </div>
                break;
            case SettingsPropertyType.TextArea:
                <div class="form-group mb-3">
                    <label class="control-label">@property.Text</label>
                    <textarea id="@property.Name" name="@property.Name" class="@property.Class" style="@property.Style">@(Model.Get<string>(property.Name, property.DefaultValue))</textarea>
                </div>
                break;
            case SettingsPropertyType.Number:
                <div class="form-group mb-3">
                    <label class="control-label">@property.Text</label>
                    <input type="number" id="@property.Name" name="@property.Name" value="@(Model.Get<string>(property.Name, property.DefaultValue))" class="@property.Class" style="@property.Style" />
                </div>
                break;
            case SettingsPropertyType.CheckBox:
                <div class="form-check mb-3">
                    <input type="checkbox" class="form-check-input @property.Class" id="@property.Name" name="@property.Name" @(Model.Get<string>(property.Name, property.DefaultValue)) style="@property.Style" />
                    <label class="form-check-label">
                        @property.Text
                    </label>
                </div>
                break;
            case SettingsPropertyType.Select:
            case SettingsPropertyType.MultiSelect:
                var items = (IEnumerable<object>)(property.Value ?? new List<object>());
                if (items.Any())
                {
                    <div class="form-group mb-3">
                        <label class="control-label">@property!.Text</label>
                        @if (property.Type == SettingsPropertyType.MultiSelect)
                        {
                            <select id="@property.Name" name="@property.Name" class="@property.Class" style="@property.Style" multiple>
                                @AddPropertySelectItems(property, items);
                            </select>
                        }
                        else
                        {
                            <select id="@property.Name" name="@property.Name" class="@property.Class" style="@property.Style">
                                @AddPropertySelectItems(property, items);
                            </select>
                        }
                    </div>
                }
                break;
        }
        if (property.Validate)
        {
            <span asp-validation-for="@property.Name" class="text-danger"></span>
        }
    }

    async Task AddPropertySelectItems(ISettingsProperty property, IEnumerable<object> items)
    {
        <option value="" disabled>Please select one</option>
        @foreach (var item in items)
        {
            var settingsValue = Model.Get<string>(property.Name, property.DefaultValue);
            if (Convert.ToString(item) == settingsValue ||
                (settingsValue == null && property.DefaultValue == item))
            {
                <option value="@item" selected="selected">@item</option>
            }
            else
            {
                <option value="@item">@item</option>
            }
        }

        await Task.CompletedTask;
    }
}

<h1>@ViewData["Title"]</h1>
<br />
@Html.DisplayFor(model => model, "Breadcrumbs", new { CurrentPage = ViewData["Title"] })

<p>@Html.ValidationMessage("Settings", new { @class = "text-danger" })</p>

<form asp-action="Index">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <ul class="nav nav-pills left-tabs">
        @if (tabs?.Any() ?? false)
        {
            tabs.Sort((a, b) => a.DisplayIndex.CompareTo(b.DisplayIndex));
            foreach (var tab in tabs)
            {
                <li class="nav-item">
                    <a class="nav-link @tab.Class" aria-current="page" id="tabs-@tab.Id" data-bs-toggle="tab" data-bs-target="#@tab.Anchor" href="#@tab.Anchor" style="@tab.Style">@tab.Text</a>
                </li>
            }
        }
    </ul>

    <div class="tab-content">
        @if (tabs?.Any() ?? false)
        {
            foreach (var tab in tabs)
            {
                if (!(properties?.ContainsKey(tab.Id) ?? false))
                    continue;

                var tabProperties = properties[tab.Id];
                if (tabProperties?.Any() ?? false)
                {
                    tabProperties.Sort((a, b) => a.DisplayIndex.CompareTo(b.DisplayIndex));
                    var groupedProperties = await UiUtils.GroupPropertiesAsync(tabProperties);
                    <div class="tab-pane @tab.Class" id="@tab.Id" role="tabpanel" aria-labelledby="tabs-@tab.Id" style="@tab.Style">
                    @foreach (var (group, settings) in groupedProperties)
                    {
                        <div class="card">
                            <div class="card-body">
                            <h5 class="card-title">@group?.Text</h5>
                                @foreach (var setting in settings)
                                {
                                    await AddProperty(setting);
                                }
                            </div>
                        </div>
                        <br />
                    }
                    </div>
                }
            }
        }
    </div>

    <div class="form-group">
        <input type="submit" value="@localizer["Save"]" class="btn btn-primary" />
    </div>
</form>