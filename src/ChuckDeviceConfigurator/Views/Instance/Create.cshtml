@model ManageInstanceViewModel
@{
    ViewData["Title"] = localizer["Create Instance"];
}

<h1>@ViewData["Title"]</h1>

<p>@Html.ValidationMessage("Instance", new { @class = "text-danger" })</p>

<br />
@Html.DisplayFor(model => model, "Breadcrumbs", new { Controller = "Instance", ControllerText = localizer["Instance"], CurrentPage = ViewData["Title"] })

<form asp-action="Create">
    <div class="pb-4">
        <div class="float-start">
            <h4>@localizer["Instance"]</h4>
        </div>
        <div class="float-end">
            <button type="submit" class="btn btn-primary btn-sm">
                <i class="fa-solid fa-floppy-disk"></i>&nbsp;@localizer["Create"]
            </button>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-lg-6 col-md-12">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating mb-3">
                <input asp-for="Name" class="form-control" placeholder="Instance name" />
                <label asp-for="Name"></label>
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            @Html.EditorForModel("EditInstanceDetails")
        </div>
        <div class="col-lg-6 col-md-12">
            @Html.EditorForModel("EditInstanceDevices")
        </div>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script src="/js/instance-manager.js"></script>
<script>
const types = [
    'bootstrap',
    'circles',
    'pokemon_iv',
    'quests',
    'spawnpoints',
    'dynamic',
    'lure_encounters',
    'circle_route',
    'leveling',
    'custom',
];
for (const type of types) {
    hideElements(type, false);
}

$('#Type').change(function() {
    const instanceTypeId = this.value;
    hideAllElements(instanceTypeId);
    handleInstanceTypeChanged(instanceTypeId);

    setInstanceDescription(parseInt(instanceTypeId));
});

const customInstanceType = document.getElementById('Data.CustomInstanceType');
customInstanceType.addEventListener('change', function(ev) {
    const instanceTypeId = $('#Type').val();
    const customInstanceType = this.value;
    handleInstanceTypeChanged(instanceTypeId, customInstanceType);
});

function hideAllElements(instanceTypeId, customInstanceType) {
    const isQuest = instanceTypeId == '@(InstanceType.AutoQuest)';
    const isBootstrap = instanceTypeId == '@(InstanceType.Bootstrap)';
    const isPokemonIV = instanceTypeId == '@(InstanceType.PokemonIV)';
    const isCircle = instanceTypeId == '@(InstanceType.CirclePokemon)' ||
        instanceTypeId == '@(InstanceType.CircleRaid)';
    const isSpawnpoint = instanceTypeId == '@(InstanceType.FindTth)';
    const isDynamic = instanceTypeId == '@(InstanceType.DynamicRoute)';
    const isLeveling = instanceTypeId == '@(InstanceType.Leveling)';
    const isCustom = instanceTypeId == '@(InstanceType.Custom)';
    hideElements('bootstrap', isBootstrap);
    hideElements('pokemon_iv', isPokemonIV);
    hideElements('circles', isCircle);
    hideElements('quests', isQuest);
    hideElements('spawnpoints', isSpawnpoint);
    hideElements('dynamic', isDynamic);
    hideElements('lure_encounters', isCircle || isDynamic || isPokemonIV);
    hideElements('circle_route', isCircle || isDynamic || isBootstrap);
    hideElements('leveling', isLeveling);
    hideElements('custom', isCustom);
}

function handleInstanceTypeChanged(instanceTypeId) {
    // Hide geofences (geofence/circle) depending on instance type selected
    const isCircle = instanceTypeId == '@(InstanceType.CirclePokemon)' ||
        instanceTypeId == '@(InstanceType.CircleRaid)';
    const customInstanceType = document.getElementById('Data.CustomInstanceType').value;
    const url = `/Instance/GetGeofences/${instanceTypeId}?customInstanceType=${customInstanceType}`;
    $.get(url, function (data) {
        if (!data) {
            return;
        }

        // Keep track of already selected geofences to reselect if type matches instance type
        const selectedGeofences = $('#Geofences').val();
        // Clear all existing geofences in the list
        $('#Geofences').empty();
        $('#Geofences').append(new Option('@localizer["Please select one"] or more', ''));
        // Loop all available geofences and add them back to the select element if they match
        // the selected instance type
        for (const geofence of data) {
            // Create new select option for valid geofence
            const option = new Option(geofence.name, geofence.name);
            // Add select option to geofences multi select element
            $('#Geofences').append(option);
        }
        // Set back the previously selected geofences, any none matched geofences will be ignored since
        // they are not in the select list
        $('#Geofences').val(selectedGeofences);
    });
}

function setInstanceDescription(instanceTypeId) {
    let description = '';
    switch (instanceTypeId) {
        case 0: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.CirclePokemon]"; break;
        case 1: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.DynamicRoute]"; break;
        case 2: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.CircleRaid]"; break;
        case 3: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.SmartRaid]"; break;
        case 4: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.AutoQuest]"; break;
        case 5: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.PokemonIV]"; break;
        case 6: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.Bootstrap]"; break;
        case 7: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.Leveling]"; break;
        case 8: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.FindTth]"; break;
        case 9: description = "@InstanceDescriptors.TypeDescriptions[InstanceType.Custom]"; break;
    }
    $('#instance-type-description').text(description);
}
</script>
}