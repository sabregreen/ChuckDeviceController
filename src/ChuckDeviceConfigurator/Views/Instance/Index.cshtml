@using ChuckDeviceConfigurator.ViewModels
@using ChuckDeviceController.Data.Entities
@model ViewModelsModel<Instance>
@{
    ViewData["Title"] = "Instances";
}

<h1>Instances</h1>

<p>
    <a class="btn btn-success btn-sm" asp-action="Create">Create New</a>
</p>

<div class="checkbox">
    <label><input type="checkbox" asp-for="AutoRefresh" onchange="handleAutoRefresh(this);"> Auto Refresh</label>
</div>

@*
@using (Html.BeginForm())
{
    <p>
        Search: @Html.TextBox("SearchKeyword", "", new { onchange = "handleSearch(this);" })
    </p>
}
*@

<table class="table table-striped">
    <thead class="table-dark">
        <tr>
            <th scope="col">
                @Html.ActionLink(Html.DisplayNameFor(model => model.Items[0].Name), "Index", new { sortOrder = ViewBag.SortOrder, sortParam = "Name", autoRefresh = ViewBag.AutoRefresh })
            </th>
            <th scope="col">
                @Html.ActionLink(Html.DisplayNameFor(model => model.Items[0].Type), "Index", new { sortOrder = ViewBag.SortOrder, sortParam = "Type", autoRefresh = ViewBag.AutoRefresh })
            </th>
            <th scope="col">
                @Html.ActionLink("Status (Completed/Attempted|Total)", "Index", new { sortOrder = ViewBag.SortOrder, sortParam = "Status", autoRefresh = ViewBag.AutoRefresh })
            </th>
            <th scope="col">
                @Html.ActionLink("Level", "Index", new { sortOrder = ViewBag.SortOrder, sortParam = "MinimumLevel", autoRefresh = ViewBag.AutoRefresh })
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Items[0].Geofences)
            </th>
            <th scope="col">
                @Html.ActionLink(Html.DisplayNameFor(model => model.Items[0].DeviceCount), "Index", new { sortOrder = ViewBag.SortOrder, sortParam = "DeviceCount", autoRefresh = ViewBag.AutoRefresh })
            </th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>
                <th scope="row">
                    @Html.DisplayFor(modelItem => item.Name)
                </th>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.Raw(item.Status)
                </td>
                <td>
                    @item.MinimumLevel-@item.MaximumLevel
                </td>
                <td>
                    @string.Join(", ", item.Geofences)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DeviceCount)
                </td>
                <td>
                    <div class="dropdown">
                        <button class="btn btn-primary btn-sm dropdown-toggle" type="button" id="dropdownGroup" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fa-solid fa-bars"></i>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownGroup">
                            <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@item.Name"><i class="fa-solid fa-pen-to-square"></i>&nbsp;Edit</a></li>
                            <li><a class="dropdown-item" asp-action="Details" asp-route-id="@item.Name"><i class="fa-solid fa-circle-info"></i>&nbsp;Details</a></li>
                            <li><a class="dropdown-item" asp-action="Delete" asp-route-id="@item.Name"><i class="fa-solid fa-trash-can"></i>&nbsp;Delete</a></li>
                        </ul>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
<script>
const handleAutoRefresh = (e) => {
    const isChecked = $(e).is(':checked');
    if (isChecked) {
        location.href = "@Html.Raw(Url.Action("Index", new { sortOrder = ViewBag.SortOrder, sortParam = ViewBag.SortParam, autoRefresh = true }))";
    } else {
        location.href = "@Html.Raw(Url.Action("Index", new { sortOrder = ViewBag.SortOrder, sortParam = ViewBag.SortParam, autoRefresh = false }))";
    }
};

function handleSearch(e) {
    // https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/sorting-filtering-and-paging-with-the-entity-framework-in-an-asp-net-mvc-application
    const value = $(e).val();
    let url = "@Html.Raw(Url.Action("Index", new { sortOrder = ViewBag.SortOrder, sortParam = ViewBag.SortParam, autoRefresh = ViewBag.AutoRefresh, searchKeyword = "SEARCH_PLACEHOLDER" }))";
    url = url.replace('SEARCH_PLACEHOLDER', value);
    console.log('replaced url:', url);
    location.href = url;
}
</script>
}