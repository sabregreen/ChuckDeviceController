@model List<UserAgentViewModel>
@{
    ViewData["Title"] = "Web Crawler Management";
}

<h1>Web Crawler Management</h1>

@Html.ValidationSummary(true, string.Empty, new { @class = "text-danger" })

<p>
    A Web crawler, sometimes called a spider or spiderbot and often shortened to crawler,
    is an Internet bot that systematically browses the World Wide Web and that is typically
    operated by search engines for the purpose of Web indexing.<br /><br />

    You can configure routes to either allow or deny web crawlers to index them.
</p>

<div class="pb-4">
    <div class="float-start">
        <a class="btn btn-success btn-sm float-start" asp-action="Create">Create New</a>
    </div>
    <div class="float-end">
        <a class="btn btn-danger btn-sm float-end" asp-action="DenyAll">Deny All</a>
        <button type="button" class="btn btn-primary btn-sm me-2" data-bs-toggle="modal" data-bs-target="#previewModal">Preview</button>
    </div>
</div>
<br />

<table id="table-agents" class="table table-striped table-bordered nowrap">
    <thead class="table-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model[0].UserAgent)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Count)
            </th>
            <th width="5%">Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <th scope="row">
                    @Html.DisplayFor(model => item.UserAgent)
                </th>
                <td>
                    @Html.DisplayFor(model => item.Count)
                </td>
                <td>
                    <div class="dropdown">
                        <button class="btn btn-primary btn-sm dropdown-toggle" type="button" id="dropdownGroup" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fa-solid fa-bars"></i>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownGroup">
                            <li><a class="dropdown-item" asp-action="Details" asp-route-id="@item.UserAgent"><i class="fa-solid fa-circle-info"></i>&nbsp;Details</a></li>
                            <li><a class="dropdown-item" asp-action="Delete" asp-route-id="@item.UserAgent"><i class="fa-solid fa-trash-can"></i>&nbsp;Delete</a></li>
                        </ul>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Web Crawler robots.txt</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <pre id="previewModalBody"></pre>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#table-agents').DataTable({
                columnDefs: [
                    { responsivePriority: 0, targets: 0 },
                    { responsivePriority: 2, targets: 1 },
                    { responsivePriority: 1, targets: -1, orderable: false },
                ],
                order: [[0, 'asc']],
                stateSave: true,
                searching: true,
                paging: true,
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, 'All']],
                colReorder: true,
                fixedHeader: {
                    header: true,
                },
                responsive: true,
                info: true,
            });

            $('#previewModal').on('show.bs.modal', async function (event) {
                const data = await fetch('/robots.txt').then(resp => resp.text());
                $('#previewModalBody').text(data);
            });
        });
    </script>
}